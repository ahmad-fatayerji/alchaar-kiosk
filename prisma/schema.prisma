// prisma/schema.prisma (monolingual)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ──────────── ENUMS ────────────
 */
enum FilterType {
  RANGE
  NUMBER
  LABEL
}

/**
 * ───────── CATEGORIES ─────────
 */
model Category {
  id   Int    @id @default(autoincrement())
  slug String @unique
  name String

  parentId Int?
  parent   Category?  @relation("CatParent", fields: [parentId], references: [id])
  children Category[] @relation("CatParent")

  filters  CategoryFilter[]
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

/**
 * ──────── FILTER DEFINITIONS ───
 */
model FilterDef {
  id    Int        @id @default(autoincrement())
  name  String
  type  FilterType
  units String?

  categories CategoryFilter[]
  values     ProductFilterValue[]
}

model CategoryFilter {
  categoryId Int
  filterId   Int

  category Category  @relation(fields: [categoryId], references: [id])
  filter   FilterDef @relation(fields: [filterId], references: [id])

  @@id([categoryId, filterId])
}

/**
 * ────────── PRODUCTS ───────────
 */
model Product {
  barcode    BigInt    @id
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  name       String // <-- single name
  price      Decimal @db.Decimal(10, 2)
  qtyInStock Int     @default(0)

  filterValues ProductFilterValue[]
  OrderItem    OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

/**
 * ─── FILTER VALUES PER PRODUCT ─
 */
model ProductFilterValue {
  productId BigInt
  filterId  Int

  rangeFrom Float?
  rangeTo   Float?
  numberVal Int?
  labelVal  String?

  product Product   @relation(fields: [productId], references: [barcode])
  filter  FilterDef @relation(fields: [filterId], references: [id])

  @@id([productId, filterId])
  @@index([filterId, rangeFrom, rangeTo])
}

/**
 * ────────── ORDERS ─────────────
 */
model Order {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  isFulfilled Boolean     @default(false)
  items       OrderItem[]

  @@index([isFulfilled])
}

model OrderItem {
  orderId   Int
  productId BigInt
  qty       Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [barcode])

  @@id([orderId, productId])
}
